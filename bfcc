#!/usr/bin/perl

use warnings;
use strict;
use 5.010;
use File::Basename;
use File::Slurp qw<read_file write_file>;
use List::Util qw<first>;

my %subs = (
    ',' => '*h=getchar();',   # Read a character from stdin, 255 on EOF
    '.' => 'putchar(*h);',    # Write a character to stdout
    '-' => '--*h;',           # Decrement tape
    '+' => '++*h;',           # Increment tape
    '<' => '--h;',            # Move head left
    '>' => '++h;',            # Move head right
    '[' => 'while(*h) {',     # Start loop
    ']' => '}',               # End loop

    # Fixed optimisations:
    '[-]'    => '*h = 0;',
    '[->+<]' => 'h[1] += h[0]; *h = 0;',
);
$_ .= "\n" for values %subs;

# Variable optimisations
my @optim = (
    ['\+\++', sub { '*h += '.length($+).'u;' }],
    ['\-\-+', sub { '*h -= '.length($+).'u;' }],
    ['\>\>+', sub {  'h += '.length($+).'u;' }],
    ['\<\<+', sub {  'h -= '.length($+).'u;' }],
);

my $header = <<END_HEADER;
#include <stdlib.h>

int main() {
    unsigned char* h;
    h = calloc(10000, 1);
END_HEADER

my $footer = <<END_FOOTER;
    return 0;
}
END_FOOTER

my $ignorable = do {
    my $chars = join '', map { "\\$_" } sort grep { length == 1 } keys %subs;
    qr/[^$chars]+/;
};

my $token = do {
    my $fixed = join '|', map { quotemeta }
        # Ensure longer alternations are tried first
        sort { length $b <=> length $a || $a cmp $b } keys %subs;
    my $optim = join '|', map { "($_->[0])" } @optim;
    qr/$optim|($fixed)/;
};

foreach my $bf_file (@ARGV) {
    my $code = read_file($bf_file);
    $code =~ s/$ignorable//g;
    $code =~ s{$token}{
        my $o = -1 + first { defined $+[$_] } 1 .. @+;
        $o < @optim ? $optim[$o][1]->()."\n" : $subs{$+};
    }peg;

    my $cfile = basename($bf_file, ".bf").".c";
    write_file($cfile, $header, $code, $footer);

    system("gcc", $cfile) == 0 or exit 1;
}
